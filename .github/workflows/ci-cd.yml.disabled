name: Reddit Clone CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/INITIAL_SETUP_COMPLETE'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_pipeline:
        description: 'Run the pipeline (set to false for initial push)'
        required: true
        default: 'true'
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: sreedhar8897/reddit
  KUBE_NAMESPACE: default

jobs:
  check-initial-push:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.run_pipeline }}" == "false" ]]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "Manual trigger with run_pipeline=false, skipping pipeline"
          elif [[ -f ".github/INITIAL_SETUP_COMPLETE" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Initial setup is complete, running pipeline"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "Initial setup file not found, skipping pipeline and creating the file"
            mkdir -p .github
            echo "Initial setup completed on $(date)" > .github/INITIAL_SETUP_COMPLETE
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .github/INITIAL_SETUP_COMPLETE
            git commit -m "Add initial setup completion marker [skip ci]"
            git push
          fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: check-initial-push
    if: needs.check-initial-push.outputs.should_run == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint || echo "No linting configured"

      - name: Run tests
        run: npm test || echo "No tests configured"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [check-initial-push, build-and-test]
    if: needs.check-initial-push.outputs.should_run == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }}
        continue-on-error: true

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Reddit Clone'
          path: '.'
          format: 'HTML'
          out: 'reports'
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [check-initial-push, security-scan]
    if: needs.check-initial-push.outputs.should_run == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}, ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
          cache-to: type=inline

      - name: Upload Docker image digest
        run: echo "Docker image digest is ${{ steps.docker_build.outputs.digest }}"

  update-kubernetes-manifests:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: [check-initial-push, build-and-push-docker]
    if: needs.check-initial-push.outputs.should_run == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update Deployment YAML
        run: |
          # Update the image tag in the deployment.yml file
          sed -i "s|image: ${{ env.DOCKER_IMAGE }}:[^ ]*|image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}|g" deployment.yml
          cat deployment.yml

      - name: Commit and Push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update Kubernetes manifests with new image tag: ${{ github.sha }}"
          file_pattern: deployment.yml

  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [check-initial-push, update-kubernetes-manifests]
    if: needs.check-initial-push.outputs.should_run == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name reddit-clone-cluster --region us-east-1
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
          kubectl apply -f ingress.yml
          kubectl rollout restart deployment/reddit-clone-deployment
          kubectl rollout status deployment/reddit-clone-deployment -n ${{ env.KUBE_NAMESPACE }}

  post-deployment-check:
    name: Post-Deployment Check
    runs-on: ubuntu-latest
    needs: [check-initial-push, deploy-to-kubernetes]
    if: needs.check-initial-push.outputs.should_run == 'true'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name reddit-clone-cluster --region us-east-1
          
      - name: Check deployment status
        run: |
          kubectl get pods -l app=reddit-clone -n ${{ env.KUBE_NAMESPACE }}
          kubectl get services -n ${{ env.KUBE_NAMESPACE }}
          echo "Deployment completed successfully at $(date)"
          
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Reddit Clone Deployment
          SLACK_MESSAGE: "Deployment ${{ job.status }} for commit ${{ github.sha }}"
        continue-on-error: true